import paseo.*
import prendas.*
describe "test de una familia que NO pasea" {

//NOTA: Este fixture está incompleto y sirve para comenzar a testear el examen.
//Es a modo de ayuda, pero no es obligatorio respetar este escenario. 
// Puede modificarse tanto como sea necesario.

	var mediaIzquierda = new ElementoDePrenda(nivelDeDesgaste = 1) //elemento de par
	var mediaDerecha = new ElementoDePrenda(nivelDeDesgaste = 3)
	
	//prenda par, la media izquierda tiene que tener 1 de desgaste, la derecha 3, el abrigo es default 0
    var mediasZoe = new PrendaPar(talle=s, elementoIzquierdo=mediaIzquierda, elementoDerecho=mediaDerecha, abrigo=0) 
	
	//prenda par, el izquierdo y derecho tiene los valores default (desgaste 0, abrigo 1)
	var zapatillaIzquierda= new ElementoDePrenda()
	var zapatillaDerecha= new ElementoDePrenda()
	var zapatillasZoe = new PrendaPar(talle=s, elementoIzquierdo=zapatillaIzquierda, elementoDerecho=zapatillaDerecha) 
	
	//prenda pesada con 5 de abrigo
	var jeanZoe = new RopaPesada(talle=s, abrigo=5) 
	
	//prenda liviana con desgaste default: 0
	var remeraZoe = new RopaLiviana(talle=s) 
	// prenda pesada con desgaste default: 0
	var camperaZoe = new RopaPesada(talle=s) 

	//un juguete para niños de 5 a 100 anios
	var ukelele = new Juguete(edadMinima=5, edadMaxima=100)
	
	//prenda liviana con un desgaste de 5
	var remeraMilena = new RopaLiviana(talle=xs, desgaste=5) //prenda liviana
	//prenda liviana con desgaste default: 0
	var calzaMilena = new RopaLiviana(talle=xs) //prenda liviana

	//prenda par, la ojota izquierda tiene que tener 1 de desgaste y 2 de abrigo, la ojota derecha tiene 3 de desgaste y 3 de abrigo
    var ojotaDerecha= new ElementoDePrenda(nivelDeDesgaste=3, abrigo=3)
    var ojotaIzquierda= new ElementoDePrenda(nivelDeDesgaste=1, abrigo=2)
    var ojotasMilena = new PrendaPar(talle=l ,  elementoIzquierdo=ojotaIzquierda, elementoDerecho=ojotaDerecha) 
	
	//ninio
	var zoe = new Ninio(talle=s, edad=11, prendas=#{mediasZoe, zapatillasZoe, jeanZoe, remeraZoe, camperaZoe }) 
	//ninio problematico
	var milena = new NinioProblematico(talle=xs, edad=2, prendas = #{remeraMilena, calzaMilena, ojotasMilena }, juguete=ukelele)
	
	//familia	
	var familiaAptaSalir = new Familia(hijos = #{ zoe})

	//familia	
	var familiaNoAptaParaSalir= new Familia(hijos = #{milena, zoe})
	
	
	
	test "comodidad" {
		
		assert.equals(6 , mediasZoe.nivelDeComodidad(zoe) )
		assert.equals(8 , zapatillasZoe.nivelDeComodidad(zoe))
		assert.equals(8 , jeanZoe.nivelDeComodidad(zoe))
		assert.equals(10 , remeraZoe.nivelDeComodidad(zoe))
		assert.equals(8 , camperaZoe.nivelDeComodidad(zoe))
		assert.equals(7 , remeraMilena.nivelDeComodidad(milena))		
		assert.equals(10 , calzaMilena.nivelDeComodidad(milena))
		assert.equals(-3 , ojotasMilena.nivelDeComodidad(milena))
	}
 
//PUNTO 2		
	test "intercambiar pares ok" {
		var mediaIzq = mediasZoe.elementoIzquierdo()
		var mediaDer = mediasZoe.elementoDerecho()
		var zapaIzq = zapatillasZoe.elementoIzquierdo()
		var zapaDer = zapatillasZoe.elementoDerecho()
		
		mediasZoe.intercambiar(zapatillasZoe)

		assert.equals(mediaIzq, mediasZoe.elementoIzquierdo())
		assert.equals(mediaDer, zapatillasZoe.elementoDerecho())
		assert.equals(zapaIzq, zapatillasZoe.elementoIzquierdo())
		assert.equals(zapaDer, mediasZoe.elementoDerecho())
				
	}
	
	test "intercambiar pares no ok" {
//		//Que sucede si intercambio un par de talles distinto?
//		//probar el cambio entre las ojotas de milena y las medias de zoe
//		//El test está incompleto!
		assert.throwsException({ojotasMilena.intercambiar(mediasZoe)})
	}

//PUNTO 3	
	test "nivel de abrigo" {
		assert.equals(2 , mediasZoe.nivelDeAbrigo())
		assert.equals(2 , zapatillasZoe.nivelDeAbrigo())
		assert.equals(5 , jeanZoe.nivelDeAbrigo() )
		assert.equals(1 ,  remeraZoe.nivelDeAbrigo())
		assert.equals(3 ,  camperaZoe.nivelDeAbrigo())
		assert.equals(1 , remeraMilena.nivelDeAbrigo())		
		assert.equals(1 ,  calzaMilena.nivelDeAbrigo())
		assert.equals(5 , ojotasMilena.nivelDeAbrigo())
	}

//PUNTO 4		
	test "puede salir de paseo" {
		assert.that(familiaAptaSalir.puedePasear())
		assert.notThat(familiaNoAptaParaSalir.puedePasear())
	}
//PUNTO 5
	
	test "infaltables" {
		assert.equals(#{jeanZoe,calzaMilena}, familiaNoAptaParaSalir.prendasInfantables())		
	}
	test "chiquitos" {
		assert.equals(#{milena}, familiaNoAptaParaSalir.chiquitos()
		)		
	}
	
//PUNTO 6	

test "salir de paseo ok" {
//como el test del punto  4 me da con una falla rompe test del punto 6 porque 
//esta implementado que salte un error cuando una familia sale sin cumplir la 
//condicion de que pueda salir
		familiaAptaSalir.pasear()
		assert.equals(1.8 , mediaIzquierda.nivelDeDesgaste())
		assert.equals(4.2 , mediaDerecha.nivelDeDesgaste())
		assert.equals(3 , mediasZoe.nivelDeDesgaste())
		assert.equals(1 , zapatillasZoe.nivelDeDesgaste())
		assert.equals(1 , jeanZoe.nivelDeDesgaste())
		assert.equals(1 , remeraZoe.nivelDeDesgaste())
		assert.equals(1 , camperaZoe.nivelDeDesgaste())
		
	}
//PUNTO 7	
	test "salir de paseo no ok" {
//		Que sucede si le pido pasear a una familia que no está lista?
//		El test está incompleto!
     		assert.throwsException({familiaNoAptaParaSalir.pasear()})
	}
	
	
}
